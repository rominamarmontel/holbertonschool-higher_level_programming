>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

>>> bg = BaseGeometry()

>>> bg.integer_validator("my_int", 12)

>>> bg.integer_validator("width", 89)

>>> bg.integer_validator("my_int", -12)
Traceback (most recent call last):
ValueError: my_int must be greater than 0

>>> bg.integer_validator("my_int", 0)
Traceback (most recent call last):
ValueError: my_int must be greater than 0

>>> bg.integer_validator("my_int", 0.5432)
Traceback (most recent call last):
TypeError: my_int must be an integer

>>> bg.integer_validator("my_int", 1, 2)
Traceback (most recent call last):
TypeError: integer_validator() takes 3 positional arguments but 4 were given

>>> bg.area()
Traceback (most recent call last):
Exception: area() is not implemented

>>> bg.integer_validator("my_list", (1, 2, 3))
Traceback (most recent call last):
TypeError: my_list must be an integer

>>> bg.integer_validator("my_list", [1, 2, 3])
Traceback (most recent call last):
TypeError: my_list must be an integer

>>> bg.integer_validator("my_list", {1, 2, 3})
Traceback (most recent call last):
TypeError: my_list must be an integer

>>> bg.integer_validator("my_list", None)
Traceback (most recent call last):
TypeError: my_list must be an integer

>>> bg.integer_validator("width", float("inf"))
Traceback (most recent call last):
TypeError: width must be an integer

>>> bg.integer_validator("width", float("NaN"))
Traceback (most recent call last):
TypeError: width must be an integer

>>> bg.integer_validator("my_int", int('inf'))
Traceback (most recent call last):
ValueError: invalid literal for int() with base 10: 'inf'

>>> bg.integer_validator()
Traceback (most recent call last):
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> bg.integer_validator("my_int")
Traceback (most recent call last):
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> bg.integer_validator("my_int", float('inf'))
Traceback (most recent call last):
TypeError: my_int must be an integer

>>> bg.integer_validator("my_int", float('NaN'))
Traceback (most recent call last):
TypeError: my_int must be an integer

>>> bg.integer_validator("my_int", int('NaN'))
Traceback (most recent call last):
ValueError: invalid literal for int() with base 10: 'NaN'

>>> bg.integer_validator("width", int(float('NaN')))
Traceback (most recent call last):
ValueError: cannot convert float NaN to integer

>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
TypeError: name must be an integer

>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
ValueError: age must be greater than 0

>>> bg.integer_validator("age", -1)
Traceback (most recent call last):
ValueError: age must be greater than 0

>>> bg.integer_validator("age", '1')
Traceback (most recent call last):
TypeError: age must be an integer

>>> bg.integer_validator("age")
Traceback (most recent call last):
TypeError: integer_validator() missing 1 required positional argument: 'value'
